name: Build

on:
  push:
    branches:
      - master
      - develop/*
  pull_request:
    branches:
      - master
  release:
    types: [ published ]

defaults:
  run:
    shell: bash

jobs:
  build_wheels_windows:
    name: Build wheels on Windows
    runs-on: windows-latest
    strategy:
      fail-fast: False
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install SWIG
        run: choco install swig -y

      - name: Build wheels
        run: |
          python -m pip install -U pip numpy wheel
          python setup.py bdist_wheel -d dist

      - name: Place wheels in artifacts folder
        uses: actions/upload-artifact@v2
        with:
          path: ./dist/*.whl

  build_wheels_unix:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Build wheels
        env:
          # only build CPython-3.6 and later and skip 32-bit builds and skip windows
          CIBW_BUILD: cp36-* cp37-* cp38-*
          CIBW_SKIP: "*-win* *-manylinux_i686"
          CIBW_BEFORE_ALL_LINUX: |
            yum update -y && yum install pcre-devel cmake3 -y
            yum remove cmake -y
            ln -s /usr/bin/cmake3 /usr/bin/cmake

            if [[ ! -e $(command -v swig) ]]; then
              curl -L https://sourceforge.net/projects/swig/files/swig/swig-4.0.2/swig-4.0.2.tar.gz/download --output /tmp/swig.tar.gz
              mkdir /tmp/swig
              tar -xvzf /tmp/swig.tar.gz -C /tmp/swig --strip-components 1 &> /dev/null
              pushd /tmp/swig
              ./configure --without-alllang --with-python3 && make -j2 && make install > /dev/null
              popd
            fi
          CIBW_BEFORE_ALL_MACOS: brew install swig
          CIBW_BEFORE_BUILD: pip install numpy
        run: |
          pip install -U pip cibuildwheel==1.5.1
          python -m cibuildwheel --output-dir dist

      - name: Place wheels in artifacts folder
        uses: actions/upload-artifact@v2
        with:
          path: ./dist/*.whl

  test-wheels:
    name: Test package installation
    needs: [ build_wheels_windows, build_wheels_unix ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Retrieve packages
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Test Package Installation
        run: |
          python -m pip install --upgrade pip

          # finds path to the right wheel or source file to install later
          os=$(echo ${{ runner.os }} | awk '{print tolower($0)}' | head -c3)

          # version refers to the python version. So 3.8 -> 38
          version=$(echo ${{ matrix.python-version }} | sed 's/\.//g')

          # this finds files like
          # nlopt-2.6.2-cp36-cp36m-win_amd64.whl
          # nlopt-2.6.2-cp36-cp36m-manylinux10_amd64.whl
          file=$(find dist -name "nlopt-*${version}*${os}*.whl" -type f);

          pip install ${file}
          python extern/nlopt/test/t_python.py

  deploy:
    name: deploy packages
    runs-on: ubuntu-latest
    needs: test-wheels
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Retrieve packages
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Install twine
        run: pip install twine

      - name: Upload packages to testpypi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_TEST_UID }}
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PWD }}
        run: python -m twine upload --skip-existing --repository testpypi dist/*

      - name: Upload packages to pypi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_UID }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PWD }}
        run: python -m twine upload --skip-existing dist/*
